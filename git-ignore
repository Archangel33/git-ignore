#!/bin/bash
#================================================================
# HEADER
#================================================================
#% SYNOPSIS
#+    ${SCRIPT_NAME} [-h | --help ] [-v | --verbose ] [ --version ] [--global | --local] [SUBCOMMAND [ SUBCOMMAND_args ]]
#%
#% DESCRIPTION
#%    ${SCRIPT_NAME} is sub-command to git which assists in the ignoring process.
#%      If  --local and --global flags are not set ${SCRIPT_NAME} will use "./.gitignore"
#%      as the value for gitignorefile. If the gitignorefile file does not exist ${SCRIPT_NAME} will
#%      create the file. See https://git-scm.com/docs/gitignore for more info on how git uses ignore files
#%
#% OPTIONS
#%    --global                    Sets the gitignorefile to be the global git ignore file which uses git's
#%                                'core.excludesFile' value located in the users '~/.gitconfig'
#%    -h, --help                  Print this help, cease further execution
#%    --local                     Sets the gitignorefile to be the repository's git exclude file("<reporoot>/.git/info/exclude")
#%    --log-level                 Sets the log level of the script, similarly to syslog
#%                                Defualt log level is INFO(6)
#%                                See https://en.wikipedia.org/wiki/Syslog#Severity_level for more info.
#%
#%    -v, --verbose               Sets --log-level to Debug(7)
#%    --version                   Displays script information
#%
#% SUBCOMMANDS
#%    add PATTERN ...             Adds patterns to the gitignorefile
#%    list                        Lists all files that are currently being ignored in the repository
#%    edit                        Opens the gitignorefile in the systems default editor.
#%                                The default editor is specified via the $EDITOR environment variable.
#%
#% EXAMPLES
#%    ${SCRIPT_NAME} --global list
#%    ${SCRIPT_NAME} edit        This will open up a .gitignore file at the CWD in the default editor
#%
#================================================================
#% IMPLEMENTATION
#-    version         ${SCRIPT_NAME} ${SCRIPT_VERSION}
#-    author          Michel J. Reed
#-    license
#-    script_id       12345
#-
#================================================================
#  DEBUG OPTION
#    set -n  # Uncomment to check your syntax, without execution.
#    set -x  # Uncomment to debug this shell script
#
#================================================================
# END_OF_HEADER
#================================================================
#== Required variables ==#
SCRIPT_HEADSIZE=$(head -200 ${0} | grep -n "^# END_OF_HEADER" | cut -f1 -d:)
SCRIPT_NAME="$(basename ${0})"
SCRIPT=$(basename ${BASH_SOURCE[0]})
SCRIPT_VERSION="0.0.1"

gitignorefile="./.gitignore"
InteractiveMode=

#SET DEFAULT OPTIONS
OPT_VERBOSE=false
OPT_LOGLEVEL=6
OPT_GLOBAL=false
OPT_LOCAL=false
OPT_MODE=0

#Set script default vars
DEFAULT_localrepoignore="$(git rev-parse --show-toplevel)/.git/info/exclude"

#Set fonts for Help.
NORM=`tput sgr0`
BOLD=`tput bold`
REV=`tput smso`

#Set loglevels
LVL_EMERG=0
LVL_ALERT=1
LVL_CRIT=2
LVL_ERR=3
LVL_WARN=4
LVL_NOTICE=5
LVL_INFO=6
LVL_DEBUG=7

declare -A LOG_LEVELS
LOG_LEVELS=([0]="emerg" [1]="alert" [2]="crit" [3]="err" [4]="warning" [5]="notice" [6]="info" [7]="debug")
function log () {
  local LEVEL=${1}
  shift
  if [ ${OPT_LOGLEVEL} -ge ${LEVEL} ]; then
      echo "[${LOG_LEVELS[$LEVEL]}]" "$@"
  fi
}

function replace_bash_variables () {
    output=''
    while IFS='' read -r line ; do
        local sed_args=()
        local varname
        while read varname ; do
            sed_args+=(-e "s/\${$varname}/${!varname}/g")
        done < <(echo "$line" | grep -o '\${[a-zA-Z_][a-zA-Z_]*}' | grep -o '[a-zA-Z_][a-zA-Z_]*' | sort -u)
        if [[ "${#sed_args[@]}" = 0 ]] ; then
            output+="$line"
        else
            output+="$( printf "$line" | sed "${sed_args[@]}")"
        fi
    done
    echo "$output"
}

#== usage functions ==#
usage() { printf "Usage: "; head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#+" | sed -e "s/^#+[ ]*//g" | replace_bash_variables ; }
usagefull() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+-]" | sed -e "s/^#[%+-]//g" | replace_bash_variables ; }
scriptinfo() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#-" | sed -e "s/^#-//g" | replace_bash_variables ; }

version(){
    echo "${SCRIPT_NAME} ${SCRIPT_VERSION}"
    echo
}

handleSubcommands(){
    local subcommand="$1"; shift
    export WORKINGDIR=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")

    log $LVL_DEBUG "wd: $WORKINGDIR"
    log $LVL_DEBUG "subcmd: $subcommand"

    if [ ! $subcommand ]; then
        subcommand="list"
    fi

    if [ ! -e "$WORKINGDIR/git-ignore-$subcommand" ]; then
        die "$subcommand is not a valid git-ignore subcommand."; exit 1
    fi

    source "$WORKINGDIR/git-ignore-$subcommand"

    if [ ! "$(type cmd_$subcommand)" 1> /dev/null ]; then
        die "subcommand '$subcommand' has no entry point"; exit 1
    fi

    cmd_$subcommand "$@"
}

die() {
    printf "$*: " >&2; usage;echo
    echo "Run '${SCRIPT_NAME} -h' to display full help text"
    exit 1
}



main(){

    if [ "$#" -lt 1 ]; then
        handleSubcommands; exit 0
    fi
    while getopts :hvg-: opt "$@"; do
        case "${opt}" in
            h )
                usagefull; exit 0;;
            v )
                OPT_VERBOSE=true;;
            g )
                OPT_GLOBAL=true;;
            - ) LONG_OPTARG="${OPTARG#*=}"
                case "${OPTARG}" in
                    version ) version; exit 0;;
                    verbose ) OPT_VERBOSE=true;;
                    global  ) [ "${OPT_LOCAL}" = true ] && die "Can not specify option '--$OPTARG' after specifing option '--local'" || OPT_GLOBAL=true;;
                    local   ) [ "${OPT_GLOBAL}" = true ] && die "Can not specify option '--$OPTARG' after specifing option '--global'" || OPT_LOCAL=true;;
                    log-level* ) OPT_LOGLEVEL=${LONG_OPTARG};;
                    version* | verbose* | global* )
                        die "Option '--$OPTARG' doesn't allow an argument" ;;
                esac;;
            \? ) die "Option '-$OPTARG' is unknown" ;;
            * )
                log $LVL_DEBUG "should handle subcommands"
                handleSubcommands
                exit 0
                break;;
        esac
    done
    shift "$((OPTIND-1))"

    # set verbosity once (set logging level)

    if [ "$OPT_VERBOSE" = "true" -a "${OPT_LOGLEVEL}" -le "${LVL_INFO}" ]; then
        OPT_LOGLEVEL=$LVL_DEBUG
    fi

    # set gitignorefile
    if [ "$OPT_GLOBAL" = "true" -a "$OPT_LOCAL" = "true" ]; then
        log $LVL_ERR "options local and global can not be used at the same time!"
    elif [ "$OPT_GLOBAL" = "true" ]; then
        gitignorefile=$(git config --get core.excludesFile)
    elif [ "$OPT_LOCAL" = "true" ]; then
        gitignorefile=$DEFAULT_localrepoignore
    elif [ "$OPT_GLOBAL" = "false" -a "$OPT_LOCAL" = "false" ]; then
        gitignorefile="./.gitignore"
    fi

    InteractiveMode=${OPT_MODE}

    # anything left in $@ should be subcommands
    log ${LVL_DEBUG} "\$@ after loop: $@"
    handleSubcommands "$@"
    log $LVL_DEBUG "EOF"
    exit 0
}

main "$@"
